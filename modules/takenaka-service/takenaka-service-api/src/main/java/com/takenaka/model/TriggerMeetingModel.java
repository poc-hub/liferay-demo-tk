/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.takenaka.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;

import java.util.Date;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model interface for the TriggerMeeting service. Represents a row in the &quot;TRIGGER_MEETING&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation <code>com.takenaka.model.impl.TriggerMeetingModelImpl</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in <code>com.takenaka.model.impl.TriggerMeetingImpl</code>.
 * </p>
 *
 * @author Sanjay.Panchal
 * @see TriggerMeeting
 * @generated
 */
@ProviderType
public interface TriggerMeetingModel extends BaseModel<TriggerMeeting> {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a trigger meeting model instance should use the {@link TriggerMeeting} interface instead.
	 */

	/**
	 * Returns the primary key of this trigger meeting.
	 *
	 * @return the primary key of this trigger meeting
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this trigger meeting.
	 *
	 * @param primaryKey the primary key of this trigger meeting
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the meeting seqno of this trigger meeting.
	 *
	 * @return the meeting seqno of this trigger meeting
	 */
	public long getMeetingSeqno();

	/**
	 * Sets the meeting seqno of this trigger meeting.
	 *
	 * @param meetingSeqno the meeting seqno of this trigger meeting
	 */
	public void setMeetingSeqno(long meetingSeqno);

	/**
	 * Returns the group ID of this trigger meeting.
	 *
	 * @return the group ID of this trigger meeting
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this trigger meeting.
	 *
	 * @param groupId the group ID of this trigger meeting
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the meeting ID of this trigger meeting.
	 *
	 * @return the meeting ID of this trigger meeting
	 */
	@AutoEscape
	public String getMeetingId();

	/**
	 * Sets the meeting ID of this trigger meeting.
	 *
	 * @param meetingId the meeting ID of this trigger meeting
	 */
	public void setMeetingId(String meetingId);

	/**
	 * Returns the meeting title of this trigger meeting.
	 *
	 * @return the meeting title of this trigger meeting
	 */
	@AutoEscape
	public String getMeetingTitle();

	/**
	 * Sets the meeting title of this trigger meeting.
	 *
	 * @param meetingTitle the meeting title of this trigger meeting
	 */
	public void setMeetingTitle(String meetingTitle);

	/**
	 * Returns the issuer of this trigger meeting.
	 *
	 * @return the issuer of this trigger meeting
	 */
	@AutoEscape
	public String getIssuer();

	/**
	 * Sets the issuer of this trigger meeting.
	 *
	 * @param issuer the issuer of this trigger meeting
	 */
	public void setIssuer(String issuer);

	/**
	 * Returns the meeting type of this trigger meeting.
	 *
	 * @return the meeting type of this trigger meeting
	 */
	@AutoEscape
	public String getMeetingType();

	/**
	 * Sets the meeting type of this trigger meeting.
	 *
	 * @param meetingType the meeting type of this trigger meeting
	 */
	public void setMeetingType(String meetingType);

	/**
	 * Returns the meet date of this trigger meeting.
	 *
	 * @return the meet date of this trigger meeting
	 */
	public Date getMeetDate();

	/**
	 * Sets the meet date of this trigger meeting.
	 *
	 * @param meetDate the meet date of this trigger meeting
	 */
	public void setMeetDate(Date meetDate);

	/**
	 * Returns the participant of this trigger meeting.
	 *
	 * @return the participant of this trigger meeting
	 */
	@AutoEscape
	public String getParticipant();

	/**
	 * Sets the participant of this trigger meeting.
	 *
	 * @param participant the participant of this trigger meeting
	 */
	public void setParticipant(String participant);

	/**
	 * Returns the meeting place of this trigger meeting.
	 *
	 * @return the meeting place of this trigger meeting
	 */
	@AutoEscape
	public String getMeetingPlace();

	/**
	 * Sets the meeting place of this trigger meeting.
	 *
	 * @param meetingPlace the meeting place of this trigger meeting
	 */
	public void setMeetingPlace(String meetingPlace);

	/**
	 * Returns the meeting summary of this trigger meeting.
	 *
	 * @return the meeting summary of this trigger meeting
	 */
	@AutoEscape
	public String getMeetingSummary();

	/**
	 * Sets the meeting summary of this trigger meeting.
	 *
	 * @param meetingSummary the meeting summary of this trigger meeting
	 */
	public void setMeetingSummary(String meetingSummary);

	/**
	 * Returns the created by of this trigger meeting.
	 *
	 * @return the created by of this trigger meeting
	 */
	@AutoEscape
	public String getCreatedBy();

	/**
	 * Sets the created by of this trigger meeting.
	 *
	 * @param createdBy the created by of this trigger meeting
	 */
	public void setCreatedBy(String createdBy);

	/**
	 * Returns the created on of this trigger meeting.
	 *
	 * @return the created on of this trigger meeting
	 */
	public Date getCreatedOn();

	/**
	 * Sets the created on of this trigger meeting.
	 *
	 * @param createdOn the created on of this trigger meeting
	 */
	public void setCreatedOn(Date createdOn);

	/**
	 * Returns the modified by of this trigger meeting.
	 *
	 * @return the modified by of this trigger meeting
	 */
	@AutoEscape
	public String getModifiedBy();

	/**
	 * Sets the modified by of this trigger meeting.
	 *
	 * @param modifiedBy the modified by of this trigger meeting
	 */
	public void setModifiedBy(String modifiedBy);

	/**
	 * Returns the modified on of this trigger meeting.
	 *
	 * @return the modified on of this trigger meeting
	 */
	public Date getModifiedOn();

	/**
	 * Sets the modified on of this trigger meeting.
	 *
	 * @param modifiedOn the modified on of this trigger meeting
	 */
	public void setModifiedOn(Date modifiedOn);

	/**
	 * Returns the is active of this trigger meeting.
	 *
	 * @return the is active of this trigger meeting
	 */
	public boolean getIsActive();

	/**
	 * Returns <code>true</code> if this trigger meeting is is active.
	 *
	 * @return <code>true</code> if this trigger meeting is is active; <code>false</code> otherwise
	 */
	public boolean isIsActive();

	/**
	 * Sets whether this trigger meeting is is active.
	 *
	 * @param isActive the is active of this trigger meeting
	 */
	public void setIsActive(boolean isActive);

}