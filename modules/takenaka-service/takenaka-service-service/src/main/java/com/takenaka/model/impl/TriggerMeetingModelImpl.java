/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.takenaka.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.takenaka.model.TriggerMeeting;
import com.takenaka.model.TriggerMeetingModel;
import com.takenaka.model.TriggerMeetingSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the TriggerMeeting service. Represents a row in the &quot;TRIGGER_MEETING&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>TriggerMeetingModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TriggerMeetingImpl}.
 * </p>
 *
 * @author Sanjay.Panchal
 * @see TriggerMeetingImpl
 * @generated
 */
@JSON(strict = true)
public class TriggerMeetingModelImpl
	extends BaseModelImpl<TriggerMeeting> implements TriggerMeetingModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a trigger meeting model instance should use the <code>TriggerMeeting</code> interface instead.
	 */
	public static final String TABLE_NAME = "TRIGGER_MEETING";

	public static final Object[][] TABLE_COLUMNS = {
		{"MEETING_SEQNO", Types.BIGINT}, {"GROUP_ID", Types.BIGINT},
		{"MEETING_ID", Types.VARCHAR}, {"MEETING_TITLE", Types.VARCHAR},
		{"ISSUER", Types.VARCHAR}, {"MEETINGTYPE", Types.VARCHAR},
		{"MEET_DATE", Types.TIMESTAMP}, {"PARTICIPANT", Types.VARCHAR},
		{"MEETING_PLACE", Types.VARCHAR}, {"MEETING_SUMMARY", Types.VARCHAR},
		{"CREATED_BY", Types.VARCHAR}, {"CREATED_ON", Types.TIMESTAMP},
		{"MODIFIED_BY", Types.VARCHAR}, {"MODIFIED_ON", Types.TIMESTAMP},
		{"IS_ACTIVE", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("MEETING_SEQNO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GROUP_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MEETING_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MEETING_TITLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ISSUER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MEETINGTYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MEET_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("PARTICIPANT", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MEETING_PLACE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MEETING_SUMMARY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_ON", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_ON", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("IS_ACTIVE", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table TRIGGER_MEETING (MEETING_SEQNO LONG not null primary key,GROUP_ID LONG,MEETING_ID VARCHAR(75) null,MEETING_TITLE VARCHAR(75) null,ISSUER VARCHAR(75) null,MEETINGTYPE VARCHAR(75) null,MEET_DATE DATE null,PARTICIPANT VARCHAR(75) null,MEETING_PLACE VARCHAR(75) null,MEETING_SUMMARY VARCHAR(75) null,CREATED_BY VARCHAR(75) null,CREATED_ON DATE null,MODIFIED_BY VARCHAR(75) null,MODIFIED_ON DATE null,IS_ACTIVE BOOLEAN)";

	public static final String TABLE_SQL_DROP = "drop table TRIGGER_MEETING";

	public static final String ORDER_BY_JPQL =
		" ORDER BY triggerMeeting.meetingSeqno ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY TRIGGER_MEETING.MEETING_SEQNO ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long MEETINGID_COLUMN_BITMASK = 1L;

	public static final long MEETINGSEQNO_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static TriggerMeeting toModel(TriggerMeetingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		TriggerMeeting model = new TriggerMeetingImpl();

		model.setMeetingSeqno(soapModel.getMeetingSeqno());
		model.setGroupId(soapModel.getGroupId());
		model.setMeetingId(soapModel.getMeetingId());
		model.setMeetingTitle(soapModel.getMeetingTitle());
		model.setIssuer(soapModel.getIssuer());
		model.setMeetingType(soapModel.getMeetingType());
		model.setMeetDate(soapModel.getMeetDate());
		model.setParticipant(soapModel.getParticipant());
		model.setMeetingPlace(soapModel.getMeetingPlace());
		model.setMeetingSummary(soapModel.getMeetingSummary());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedOn(soapModel.getModifiedOn());
		model.setIsActive(soapModel.isIsActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<TriggerMeeting> toModels(
		TriggerMeetingSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<TriggerMeeting> models = new ArrayList<TriggerMeeting>(
			soapModels.length);

		for (TriggerMeetingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public TriggerMeetingModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _meetingSeqno;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMeetingSeqno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _meetingSeqno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TriggerMeeting.class;
	}

	@Override
	public String getModelClassName() {
		return TriggerMeeting.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<TriggerMeeting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<TriggerMeeting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TriggerMeeting, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((TriggerMeeting)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<TriggerMeeting, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<TriggerMeeting, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(TriggerMeeting)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<TriggerMeeting, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<TriggerMeeting, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, TriggerMeeting>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			TriggerMeeting.class.getClassLoader(), TriggerMeeting.class,
			ModelWrapper.class);

		try {
			Constructor<TriggerMeeting> constructor =
				(Constructor<TriggerMeeting>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<TriggerMeeting, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<TriggerMeeting, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<TriggerMeeting, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<TriggerMeeting, Object>>();
		Map<String, BiConsumer<TriggerMeeting, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<TriggerMeeting, ?>>();

		attributeGetterFunctions.put(
			"meetingSeqno", TriggerMeeting::getMeetingSeqno);
		attributeSetterBiConsumers.put(
			"meetingSeqno",
			(BiConsumer<TriggerMeeting, Long>)TriggerMeeting::setMeetingSeqno);
		attributeGetterFunctions.put("groupId", TriggerMeeting::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<TriggerMeeting, Long>)TriggerMeeting::setGroupId);
		attributeGetterFunctions.put("meetingId", TriggerMeeting::getMeetingId);
		attributeSetterBiConsumers.put(
			"meetingId",
			(BiConsumer<TriggerMeeting, String>)TriggerMeeting::setMeetingId);
		attributeGetterFunctions.put(
			"meetingTitle", TriggerMeeting::getMeetingTitle);
		attributeSetterBiConsumers.put(
			"meetingTitle",
			(BiConsumer<TriggerMeeting, String>)
				TriggerMeeting::setMeetingTitle);
		attributeGetterFunctions.put("issuer", TriggerMeeting::getIssuer);
		attributeSetterBiConsumers.put(
			"issuer",
			(BiConsumer<TriggerMeeting, String>)TriggerMeeting::setIssuer);
		attributeGetterFunctions.put(
			"meetingType", TriggerMeeting::getMeetingType);
		attributeSetterBiConsumers.put(
			"meetingType",
			(BiConsumer<TriggerMeeting, String>)TriggerMeeting::setMeetingType);
		attributeGetterFunctions.put("meetDate", TriggerMeeting::getMeetDate);
		attributeSetterBiConsumers.put(
			"meetDate",
			(BiConsumer<TriggerMeeting, Date>)TriggerMeeting::setMeetDate);
		attributeGetterFunctions.put(
			"participant", TriggerMeeting::getParticipant);
		attributeSetterBiConsumers.put(
			"participant",
			(BiConsumer<TriggerMeeting, String>)TriggerMeeting::setParticipant);
		attributeGetterFunctions.put(
			"meetingPlace", TriggerMeeting::getMeetingPlace);
		attributeSetterBiConsumers.put(
			"meetingPlace",
			(BiConsumer<TriggerMeeting, String>)
				TriggerMeeting::setMeetingPlace);
		attributeGetterFunctions.put(
			"meetingSummary", TriggerMeeting::getMeetingSummary);
		attributeSetterBiConsumers.put(
			"meetingSummary",
			(BiConsumer<TriggerMeeting, String>)
				TriggerMeeting::setMeetingSummary);
		attributeGetterFunctions.put("createdBy", TriggerMeeting::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<TriggerMeeting, String>)TriggerMeeting::setCreatedBy);
		attributeGetterFunctions.put("createdOn", TriggerMeeting::getCreatedOn);
		attributeSetterBiConsumers.put(
			"createdOn",
			(BiConsumer<TriggerMeeting, Date>)TriggerMeeting::setCreatedOn);
		attributeGetterFunctions.put(
			"modifiedBy", TriggerMeeting::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<TriggerMeeting, String>)TriggerMeeting::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedOn", TriggerMeeting::getModifiedOn);
		attributeSetterBiConsumers.put(
			"modifiedOn",
			(BiConsumer<TriggerMeeting, Date>)TriggerMeeting::setModifiedOn);
		attributeGetterFunctions.put("isActive", TriggerMeeting::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive",
			(BiConsumer<TriggerMeeting, Boolean>)TriggerMeeting::setIsActive);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMeetingSeqno() {
		return _meetingSeqno;
	}

	@Override
	public void setMeetingSeqno(long meetingSeqno) {
		_meetingSeqno = meetingSeqno;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public String getMeetingId() {
		if (_meetingId == null) {
			return "";
		}
		else {
			return _meetingId;
		}
	}

	@Override
	public void setMeetingId(String meetingId) {
		_columnBitmask |= MEETINGID_COLUMN_BITMASK;

		if (_originalMeetingId == null) {
			_originalMeetingId = _meetingId;
		}

		_meetingId = meetingId;
	}

	public String getOriginalMeetingId() {
		return GetterUtil.getString(_originalMeetingId);
	}

	@JSON
	@Override
	public String getMeetingTitle() {
		if (_meetingTitle == null) {
			return "";
		}
		else {
			return _meetingTitle;
		}
	}

	@Override
	public void setMeetingTitle(String meetingTitle) {
		_meetingTitle = meetingTitle;
	}

	@JSON
	@Override
	public String getIssuer() {
		if (_issuer == null) {
			return "";
		}
		else {
			return _issuer;
		}
	}

	@Override
	public void setIssuer(String issuer) {
		_issuer = issuer;
	}

	@JSON
	@Override
	public String getMeetingType() {
		if (_meetingType == null) {
			return "";
		}
		else {
			return _meetingType;
		}
	}

	@Override
	public void setMeetingType(String meetingType) {
		_meetingType = meetingType;
	}

	@JSON
	@Override
	public Date getMeetDate() {
		return _meetDate;
	}

	@Override
	public void setMeetDate(Date meetDate) {
		_meetDate = meetDate;
	}

	@JSON
	@Override
	public String getParticipant() {
		if (_participant == null) {
			return "";
		}
		else {
			return _participant;
		}
	}

	@Override
	public void setParticipant(String participant) {
		_participant = participant;
	}

	@JSON
	@Override
	public String getMeetingPlace() {
		if (_meetingPlace == null) {
			return "";
		}
		else {
			return _meetingPlace;
		}
	}

	@Override
	public void setMeetingPlace(String meetingPlace) {
		_meetingPlace = meetingPlace;
	}

	@JSON
	@Override
	public String getMeetingSummary() {
		if (_meetingSummary == null) {
			return "";
		}
		else {
			return _meetingSummary;
		}
	}

	@Override
	public void setMeetingSummary(String meetingSummary) {
		_meetingSummary = meetingSummary;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return "";
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedOn() {
		return _modifiedOn;
	}

	@Override
	public void setModifiedOn(Date modifiedOn) {
		_modifiedOn = modifiedOn;
	}

	@JSON
	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@JSON
	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		_isActive = isActive;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, TriggerMeeting.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TriggerMeeting toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, TriggerMeeting>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TriggerMeetingImpl triggerMeetingImpl = new TriggerMeetingImpl();

		triggerMeetingImpl.setMeetingSeqno(getMeetingSeqno());
		triggerMeetingImpl.setGroupId(getGroupId());
		triggerMeetingImpl.setMeetingId(getMeetingId());
		triggerMeetingImpl.setMeetingTitle(getMeetingTitle());
		triggerMeetingImpl.setIssuer(getIssuer());
		triggerMeetingImpl.setMeetingType(getMeetingType());
		triggerMeetingImpl.setMeetDate(getMeetDate());
		triggerMeetingImpl.setParticipant(getParticipant());
		triggerMeetingImpl.setMeetingPlace(getMeetingPlace());
		triggerMeetingImpl.setMeetingSummary(getMeetingSummary());
		triggerMeetingImpl.setCreatedBy(getCreatedBy());
		triggerMeetingImpl.setCreatedOn(getCreatedOn());
		triggerMeetingImpl.setModifiedBy(getModifiedBy());
		triggerMeetingImpl.setModifiedOn(getModifiedOn());
		triggerMeetingImpl.setIsActive(isIsActive());

		triggerMeetingImpl.resetOriginalValues();

		return triggerMeetingImpl;
	}

	@Override
	public int compareTo(TriggerMeeting triggerMeeting) {
		long primaryKey = triggerMeeting.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TriggerMeeting)) {
			return false;
		}

		TriggerMeeting triggerMeeting = (TriggerMeeting)obj;

		long primaryKey = triggerMeeting.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		TriggerMeetingModelImpl triggerMeetingModelImpl = this;

		triggerMeetingModelImpl._originalMeetingId =
			triggerMeetingModelImpl._meetingId;

		triggerMeetingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TriggerMeeting> toCacheModel() {
		TriggerMeetingCacheModel triggerMeetingCacheModel =
			new TriggerMeetingCacheModel();

		triggerMeetingCacheModel.meetingSeqno = getMeetingSeqno();

		triggerMeetingCacheModel.groupId = getGroupId();

		triggerMeetingCacheModel.meetingId = getMeetingId();

		String meetingId = triggerMeetingCacheModel.meetingId;

		if ((meetingId != null) && (meetingId.length() == 0)) {
			triggerMeetingCacheModel.meetingId = null;
		}

		triggerMeetingCacheModel.meetingTitle = getMeetingTitle();

		String meetingTitle = triggerMeetingCacheModel.meetingTitle;

		if ((meetingTitle != null) && (meetingTitle.length() == 0)) {
			triggerMeetingCacheModel.meetingTitle = null;
		}

		triggerMeetingCacheModel.issuer = getIssuer();

		String issuer = triggerMeetingCacheModel.issuer;

		if ((issuer != null) && (issuer.length() == 0)) {
			triggerMeetingCacheModel.issuer = null;
		}

		triggerMeetingCacheModel.meetingType = getMeetingType();

		String meetingType = triggerMeetingCacheModel.meetingType;

		if ((meetingType != null) && (meetingType.length() == 0)) {
			triggerMeetingCacheModel.meetingType = null;
		}

		Date meetDate = getMeetDate();

		if (meetDate != null) {
			triggerMeetingCacheModel.meetDate = meetDate.getTime();
		}
		else {
			triggerMeetingCacheModel.meetDate = Long.MIN_VALUE;
		}

		triggerMeetingCacheModel.participant = getParticipant();

		String participant = triggerMeetingCacheModel.participant;

		if ((participant != null) && (participant.length() == 0)) {
			triggerMeetingCacheModel.participant = null;
		}

		triggerMeetingCacheModel.meetingPlace = getMeetingPlace();

		String meetingPlace = triggerMeetingCacheModel.meetingPlace;

		if ((meetingPlace != null) && (meetingPlace.length() == 0)) {
			triggerMeetingCacheModel.meetingPlace = null;
		}

		triggerMeetingCacheModel.meetingSummary = getMeetingSummary();

		String meetingSummary = triggerMeetingCacheModel.meetingSummary;

		if ((meetingSummary != null) && (meetingSummary.length() == 0)) {
			triggerMeetingCacheModel.meetingSummary = null;
		}

		triggerMeetingCacheModel.createdBy = getCreatedBy();

		String createdBy = triggerMeetingCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			triggerMeetingCacheModel.createdBy = null;
		}

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			triggerMeetingCacheModel.createdOn = createdOn.getTime();
		}
		else {
			triggerMeetingCacheModel.createdOn = Long.MIN_VALUE;
		}

		triggerMeetingCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = triggerMeetingCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			triggerMeetingCacheModel.modifiedBy = null;
		}

		Date modifiedOn = getModifiedOn();

		if (modifiedOn != null) {
			triggerMeetingCacheModel.modifiedOn = modifiedOn.getTime();
		}
		else {
			triggerMeetingCacheModel.modifiedOn = Long.MIN_VALUE;
		}

		triggerMeetingCacheModel.isActive = isIsActive();

		return triggerMeetingCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<TriggerMeeting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<TriggerMeeting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TriggerMeeting, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((TriggerMeeting)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<TriggerMeeting, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<TriggerMeeting, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<TriggerMeeting, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((TriggerMeeting)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, TriggerMeeting>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _meetingSeqno;
	private long _groupId;
	private String _meetingId;
	private String _originalMeetingId;
	private String _meetingTitle;
	private String _issuer;
	private String _meetingType;
	private Date _meetDate;
	private String _participant;
	private String _meetingPlace;
	private String _meetingSummary;
	private String _createdBy;
	private Date _createdOn;
	private String _modifiedBy;
	private Date _modifiedOn;
	private boolean _isActive;
	private long _columnBitmask;
	private TriggerMeeting _escapedModel;

}