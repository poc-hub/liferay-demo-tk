/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.takenaka.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.takenaka.model.DesignChangeDetails;
import com.takenaka.model.DesignChangeDetailsModel;
import com.takenaka.model.DesignChangeDetailsSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DesignChangeDetails service. Represents a row in the &quot;DESIGN_CHANGE_DETAILS&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DesignChangeDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DesignChangeDetailsImpl}.
 * </p>
 *
 * @author Sanjay.Panchal
 * @see DesignChangeDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class DesignChangeDetailsModelImpl
	extends BaseModelImpl<DesignChangeDetails>
	implements DesignChangeDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a design change details model instance should use the <code>DesignChangeDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "DESIGN_CHANGE_DETAILS";

	public static final Object[][] TABLE_COLUMNS = {
		{"DCR_CHANGE_SEQNO", Types.BIGINT},
		{"DESIGNCHANGE_SUBSEQNO", Types.BIGINT}, {"GROUP_ID", Types.BIGINT},
		{"REVISION_NO", Types.INTEGER}, {"MEETING_ID", Types.VARCHAR},
		{"ISSUER", Types.VARCHAR}, {"CHANGETYPE", Types.VARCHAR},
		{"CHANGEREQUESTBY", Types.VARCHAR}, {"RFC_ID", Types.VARCHAR},
		{"RFC_OTHERS", Types.VARCHAR}, {"RANGE_OF_DISCLOSURE", Types.VARCHAR},
		{"FLOOR", Types.VARCHAR}, {"ITEM", Types.VARCHAR},
		{"ORIGINALDESGIN_DETAIL", Types.VARCHAR},
		{"CHANGE_DETAIL", Types.VARCHAR}, {"ACTION", Types.VARCHAR},
		{"ESTDESIGN_COSTTYPE", Types.VARCHAR}, {"ESTDESIGN_COST", Types.BIGINT},
		{"ESTCONSTRUCTION_COSTTYPE", Types.VARCHAR},
		{"ESTCONSTRUCTION_COST", Types.BIGINT},
		{"EXPENSE_AJUSTMENT_DIVISION", Types.VARCHAR},
		{"ATTACHMENT_ID_1", Types.BIGINT}, {"ATTACHMENT_ID_2", Types.BIGINT},
		{"ATTACHMENT_ID_3", Types.BIGINT}, {"ATTACHMENT_ID_4", Types.BIGINT},
		{"ATTACHMENT1", Types.VARCHAR}, {"ATTACHMENT2", Types.VARCHAR},
		{"ATTACHMENT3", Types.VARCHAR}, {"ATTACHMENT4", Types.VARCHAR},
		{"RESPONSE_PERIOD", Types.VARCHAR}, {"PERSON_IN_CHARGE", Types.VARCHAR},
		{"APPROVAL_NO", Types.BIGINT}, {"APPROVAL_STATUS", Types.VARCHAR},
		{"APPROVAL_DATE", Types.TIMESTAMP},
		{"CLIENT_APPROVAL_STATUS", Types.VARCHAR},
		{"CLIENT_APPROVAL_DATE", Types.TIMESTAMP},
		{"CONSTRUCTION_STATUS", Types.VARCHAR},
		{"CONSTRUCTION_DATE", Types.TIMESTAMP}, {"CREATED_BY", Types.VARCHAR},
		{"CREATED_ON", Types.TIMESTAMP}, {"MODIFIED_BY", Types.VARCHAR},
		{"MODIFIED_ON", Types.TIMESTAMP}, {"IS_ACTIVE", Types.BOOLEAN}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("DCR_CHANGE_SEQNO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("DESIGNCHANGE_SUBSEQNO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("GROUP_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("REVISION_NO", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MEETING_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ISSUER", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHANGETYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHANGEREQUESTBY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RFC_ID", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RFC_OTHERS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RANGE_OF_DISCLOSURE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("FLOOR", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ITEM", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ORIGINALDESGIN_DETAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CHANGE_DETAIL", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ACTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ESTDESIGN_COSTTYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ESTDESIGN_COST", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ESTCONSTRUCTION_COSTTYPE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ESTCONSTRUCTION_COST", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("EXPENSE_AJUSTMENT_DIVISION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ATTACHMENT_ID_1", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ATTACHMENT_ID_2", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ATTACHMENT_ID_3", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ATTACHMENT_ID_4", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("ATTACHMENT1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ATTACHMENT2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ATTACHMENT3", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ATTACHMENT4", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("RESPONSE_PERIOD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PERSON_IN_CHARGE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("APPROVAL_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("APPROVAL_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("APPROVAL_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CLIENT_APPROVAL_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CLIENT_APPROVAL_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CONSTRUCTION_STATUS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CONSTRUCTION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("CREATED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("CREATED_ON", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("MODIFIED_BY", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("MODIFIED_ON", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("IS_ACTIVE", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DESIGN_CHANGE_DETAILS (DCR_CHANGE_SEQNO LONG not null primary key,DESIGNCHANGE_SUBSEQNO LONG,GROUP_ID LONG,REVISION_NO INTEGER,MEETING_ID VARCHAR(75) null,ISSUER VARCHAR(75) null,CHANGETYPE VARCHAR(75) null,CHANGEREQUESTBY VARCHAR(75) null,RFC_ID VARCHAR(75) null,RFC_OTHERS VARCHAR(75) null,RANGE_OF_DISCLOSURE VARCHAR(75) null,FLOOR VARCHAR(75) null,ITEM VARCHAR(75) null,ORIGINALDESGIN_DETAIL VARCHAR(75) null,CHANGE_DETAIL VARCHAR(75) null,ACTION VARCHAR(75) null,ESTDESIGN_COSTTYPE VARCHAR(75) null,ESTDESIGN_COST LONG,ESTCONSTRUCTION_COSTTYPE VARCHAR(75) null,ESTCONSTRUCTION_COST LONG,EXPENSE_AJUSTMENT_DIVISION VARCHAR(75) null,ATTACHMENT_ID_1 LONG,ATTACHMENT_ID_2 LONG,ATTACHMENT_ID_3 LONG,ATTACHMENT_ID_4 LONG,ATTACHMENT1 VARCHAR(75) null,ATTACHMENT2 VARCHAR(75) null,ATTACHMENT3 VARCHAR(75) null,ATTACHMENT4 VARCHAR(75) null,RESPONSE_PERIOD VARCHAR(75) null,PERSON_IN_CHARGE VARCHAR(75) null,APPROVAL_NO LONG,APPROVAL_STATUS VARCHAR(75) null,APPROVAL_DATE DATE null,CLIENT_APPROVAL_STATUS VARCHAR(75) null,CLIENT_APPROVAL_DATE DATE null,CONSTRUCTION_STATUS VARCHAR(75) null,CONSTRUCTION_DATE DATE null,CREATED_BY VARCHAR(75) null,CREATED_ON DATE null,MODIFIED_BY VARCHAR(75) null,MODIFIED_ON DATE null,IS_ACTIVE BOOLEAN)";

	public static final String TABLE_SQL_DROP =
		"drop table DESIGN_CHANGE_DETAILS";

	public static final String ORDER_BY_JPQL =
		" ORDER BY designChangeDetails.dcrChangeSeqno ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DESIGN_CHANGE_DETAILS.DCR_CHANGE_SEQNO ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DesignChangeDetails toModel(
		DesignChangeDetailsSoap soapModel) {

		if (soapModel == null) {
			return null;
		}

		DesignChangeDetails model = new DesignChangeDetailsImpl();

		model.setDcrChangeSeqno(soapModel.getDcrChangeSeqno());
		model.setDesignchangeSubseqno(soapModel.getDesignchangeSubseqno());
		model.setGroupId(soapModel.getGroupId());
		model.setRevisionNo(soapModel.getRevisionNo());
		model.setMeetingId(soapModel.getMeetingId());
		model.setIssuer(soapModel.getIssuer());
		model.setChangeType(soapModel.getChangeType());
		model.setChangeRequestby(soapModel.getChangeRequestby());
		model.setRfcId(soapModel.getRfcId());
		model.setRfcOthers(soapModel.getRfcOthers());
		model.setRangeOfDisclosure(soapModel.getRangeOfDisclosure());
		model.setFloor(soapModel.getFloor());
		model.setItem(soapModel.getItem());
		model.setOriginaldesginDetail(soapModel.getOriginaldesginDetail());
		model.setChangeDetail(soapModel.getChangeDetail());
		model.setAction(soapModel.getAction());
		model.setEstdesignCosttype(soapModel.getEstdesignCosttype());
		model.setEstdesignCost(soapModel.getEstdesignCost());
		model.setEstconstructionCosttype(
			soapModel.getEstconstructionCosttype());
		model.setEstconstructionCost(soapModel.getEstconstructionCost());
		model.setExpenseAjustmentDivision(
			soapModel.getExpenseAjustmentDivision());
		model.setAttachmentId1(soapModel.getAttachmentId1());
		model.setAttachmentId2(soapModel.getAttachmentId2());
		model.setAttachmentId3(soapModel.getAttachmentId3());
		model.setAttachmentId4(soapModel.getAttachmentId4());
		model.setAttachment1(soapModel.getAttachment1());
		model.setAttachment2(soapModel.getAttachment2());
		model.setAttachment3(soapModel.getAttachment3());
		model.setAttachment4(soapModel.getAttachment4());
		model.setResponsePeriod(soapModel.getResponsePeriod());
		model.setPersonInCharge(soapModel.getPersonInCharge());
		model.setApprovalNo(soapModel.getApprovalNo());
		model.setApprovalStatus(soapModel.getApprovalStatus());
		model.setApprovalDate(soapModel.getApprovalDate());
		model.setClientApprovalStatus(soapModel.getClientApprovalStatus());
		model.setClientApprovalDate(soapModel.getClientApprovalDate());
		model.setConstructionStatus(soapModel.getConstructionStatus());
		model.setConstructionDate(soapModel.getConstructionDate());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setCreatedOn(soapModel.getCreatedOn());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setModifiedOn(soapModel.getModifiedOn());
		model.setIsActive(soapModel.isIsActive());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DesignChangeDetails> toModels(
		DesignChangeDetailsSoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<DesignChangeDetails> models = new ArrayList<DesignChangeDetails>(
			soapModels.length);

		for (DesignChangeDetailsSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public DesignChangeDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dcrChangeSeqno;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDcrChangeSeqno(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dcrChangeSeqno;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DesignChangeDetails.class;
	}

	@Override
	public String getModelClassName() {
		return DesignChangeDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DesignChangeDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DesignChangeDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DesignChangeDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DesignChangeDetails)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DesignChangeDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DesignChangeDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DesignChangeDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DesignChangeDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DesignChangeDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, DesignChangeDetails>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			DesignChangeDetails.class.getClassLoader(),
			DesignChangeDetails.class, ModelWrapper.class);

		try {
			Constructor<DesignChangeDetails> constructor =
				(Constructor<DesignChangeDetails>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<DesignChangeDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DesignChangeDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DesignChangeDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<DesignChangeDetails, Object>>();
		Map<String, BiConsumer<DesignChangeDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<DesignChangeDetails, ?>>();

		attributeGetterFunctions.put(
			"dcrChangeSeqno", DesignChangeDetails::getDcrChangeSeqno);
		attributeSetterBiConsumers.put(
			"dcrChangeSeqno",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setDcrChangeSeqno);
		attributeGetterFunctions.put(
			"designchangeSubseqno",
			DesignChangeDetails::getDesignchangeSubseqno);
		attributeSetterBiConsumers.put(
			"designchangeSubseqno",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setDesignchangeSubseqno);
		attributeGetterFunctions.put(
			"groupId", DesignChangeDetails::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setGroupId);
		attributeGetterFunctions.put(
			"revisionNo", DesignChangeDetails::getRevisionNo);
		attributeSetterBiConsumers.put(
			"revisionNo",
			(BiConsumer<DesignChangeDetails, Integer>)
				DesignChangeDetails::setRevisionNo);
		attributeGetterFunctions.put(
			"meetingId", DesignChangeDetails::getMeetingId);
		attributeSetterBiConsumers.put(
			"meetingId",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setMeetingId);
		attributeGetterFunctions.put("issuer", DesignChangeDetails::getIssuer);
		attributeSetterBiConsumers.put(
			"issuer",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setIssuer);
		attributeGetterFunctions.put(
			"changeType", DesignChangeDetails::getChangeType);
		attributeSetterBiConsumers.put(
			"changeType",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setChangeType);
		attributeGetterFunctions.put(
			"changeRequestby", DesignChangeDetails::getChangeRequestby);
		attributeSetterBiConsumers.put(
			"changeRequestby",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setChangeRequestby);
		attributeGetterFunctions.put("rfcId", DesignChangeDetails::getRfcId);
		attributeSetterBiConsumers.put(
			"rfcId",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setRfcId);
		attributeGetterFunctions.put(
			"rfcOthers", DesignChangeDetails::getRfcOthers);
		attributeSetterBiConsumers.put(
			"rfcOthers",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setRfcOthers);
		attributeGetterFunctions.put(
			"rangeOfDisclosure", DesignChangeDetails::getRangeOfDisclosure);
		attributeSetterBiConsumers.put(
			"rangeOfDisclosure",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setRangeOfDisclosure);
		attributeGetterFunctions.put("floor", DesignChangeDetails::getFloor);
		attributeSetterBiConsumers.put(
			"floor",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setFloor);
		attributeGetterFunctions.put("item", DesignChangeDetails::getItem);
		attributeSetterBiConsumers.put(
			"item",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setItem);
		attributeGetterFunctions.put(
			"originaldesginDetail",
			DesignChangeDetails::getOriginaldesginDetail);
		attributeSetterBiConsumers.put(
			"originaldesginDetail",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setOriginaldesginDetail);
		attributeGetterFunctions.put(
			"changeDetail", DesignChangeDetails::getChangeDetail);
		attributeSetterBiConsumers.put(
			"changeDetail",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setChangeDetail);
		attributeGetterFunctions.put("action", DesignChangeDetails::getAction);
		attributeSetterBiConsumers.put(
			"action",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setAction);
		attributeGetterFunctions.put(
			"estdesignCosttype", DesignChangeDetails::getEstdesignCosttype);
		attributeSetterBiConsumers.put(
			"estdesignCosttype",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setEstdesignCosttype);
		attributeGetterFunctions.put(
			"estdesignCost", DesignChangeDetails::getEstdesignCost);
		attributeSetterBiConsumers.put(
			"estdesignCost",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setEstdesignCost);
		attributeGetterFunctions.put(
			"estconstructionCosttype",
			DesignChangeDetails::getEstconstructionCosttype);
		attributeSetterBiConsumers.put(
			"estconstructionCosttype",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setEstconstructionCosttype);
		attributeGetterFunctions.put(
			"estconstructionCost", DesignChangeDetails::getEstconstructionCost);
		attributeSetterBiConsumers.put(
			"estconstructionCost",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setEstconstructionCost);
		attributeGetterFunctions.put(
			"expenseAjustmentDivision",
			DesignChangeDetails::getExpenseAjustmentDivision);
		attributeSetterBiConsumers.put(
			"expenseAjustmentDivision",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setExpenseAjustmentDivision);
		attributeGetterFunctions.put(
			"attachmentId1", DesignChangeDetails::getAttachmentId1);
		attributeSetterBiConsumers.put(
			"attachmentId1",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setAttachmentId1);
		attributeGetterFunctions.put(
			"attachmentId2", DesignChangeDetails::getAttachmentId2);
		attributeSetterBiConsumers.put(
			"attachmentId2",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setAttachmentId2);
		attributeGetterFunctions.put(
			"attachmentId3", DesignChangeDetails::getAttachmentId3);
		attributeSetterBiConsumers.put(
			"attachmentId3",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setAttachmentId3);
		attributeGetterFunctions.put(
			"attachmentId4", DesignChangeDetails::getAttachmentId4);
		attributeSetterBiConsumers.put(
			"attachmentId4",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setAttachmentId4);
		attributeGetterFunctions.put(
			"attachment1", DesignChangeDetails::getAttachment1);
		attributeSetterBiConsumers.put(
			"attachment1",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setAttachment1);
		attributeGetterFunctions.put(
			"attachment2", DesignChangeDetails::getAttachment2);
		attributeSetterBiConsumers.put(
			"attachment2",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setAttachment2);
		attributeGetterFunctions.put(
			"attachment3", DesignChangeDetails::getAttachment3);
		attributeSetterBiConsumers.put(
			"attachment3",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setAttachment3);
		attributeGetterFunctions.put(
			"attachment4", DesignChangeDetails::getAttachment4);
		attributeSetterBiConsumers.put(
			"attachment4",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setAttachment4);
		attributeGetterFunctions.put(
			"responsePeriod", DesignChangeDetails::getResponsePeriod);
		attributeSetterBiConsumers.put(
			"responsePeriod",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setResponsePeriod);
		attributeGetterFunctions.put(
			"personInCharge", DesignChangeDetails::getPersonInCharge);
		attributeSetterBiConsumers.put(
			"personInCharge",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setPersonInCharge);
		attributeGetterFunctions.put(
			"approvalNo", DesignChangeDetails::getApprovalNo);
		attributeSetterBiConsumers.put(
			"approvalNo",
			(BiConsumer<DesignChangeDetails, Long>)
				DesignChangeDetails::setApprovalNo);
		attributeGetterFunctions.put(
			"approvalStatus", DesignChangeDetails::getApprovalStatus);
		attributeSetterBiConsumers.put(
			"approvalStatus",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setApprovalStatus);
		attributeGetterFunctions.put(
			"approvalDate", DesignChangeDetails::getApprovalDate);
		attributeSetterBiConsumers.put(
			"approvalDate",
			(BiConsumer<DesignChangeDetails, Date>)
				DesignChangeDetails::setApprovalDate);
		attributeGetterFunctions.put(
			"clientApprovalStatus",
			DesignChangeDetails::getClientApprovalStatus);
		attributeSetterBiConsumers.put(
			"clientApprovalStatus",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setClientApprovalStatus);
		attributeGetterFunctions.put(
			"clientApprovalDate", DesignChangeDetails::getClientApprovalDate);
		attributeSetterBiConsumers.put(
			"clientApprovalDate",
			(BiConsumer<DesignChangeDetails, Date>)
				DesignChangeDetails::setClientApprovalDate);
		attributeGetterFunctions.put(
			"constructionStatus", DesignChangeDetails::getConstructionStatus);
		attributeSetterBiConsumers.put(
			"constructionStatus",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setConstructionStatus);
		attributeGetterFunctions.put(
			"constructionDate", DesignChangeDetails::getConstructionDate);
		attributeSetterBiConsumers.put(
			"constructionDate",
			(BiConsumer<DesignChangeDetails, Date>)
				DesignChangeDetails::setConstructionDate);
		attributeGetterFunctions.put(
			"createdBy", DesignChangeDetails::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setCreatedBy);
		attributeGetterFunctions.put(
			"createdOn", DesignChangeDetails::getCreatedOn);
		attributeSetterBiConsumers.put(
			"createdOn",
			(BiConsumer<DesignChangeDetails, Date>)
				DesignChangeDetails::setCreatedOn);
		attributeGetterFunctions.put(
			"modifiedBy", DesignChangeDetails::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<DesignChangeDetails, String>)
				DesignChangeDetails::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedOn", DesignChangeDetails::getModifiedOn);
		attributeSetterBiConsumers.put(
			"modifiedOn",
			(BiConsumer<DesignChangeDetails, Date>)
				DesignChangeDetails::setModifiedOn);
		attributeGetterFunctions.put(
			"isActive", DesignChangeDetails::getIsActive);
		attributeSetterBiConsumers.put(
			"isActive",
			(BiConsumer<DesignChangeDetails, Boolean>)
				DesignChangeDetails::setIsActive);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getDcrChangeSeqno() {
		return _dcrChangeSeqno;
	}

	@Override
	public void setDcrChangeSeqno(long dcrChangeSeqno) {
		_dcrChangeSeqno = dcrChangeSeqno;
	}

	@JSON
	@Override
	public long getDesignchangeSubseqno() {
		return _designchangeSubseqno;
	}

	@Override
	public void setDesignchangeSubseqno(long designchangeSubseqno) {
		_designchangeSubseqno = designchangeSubseqno;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public int getRevisionNo() {
		return _revisionNo;
	}

	@Override
	public void setRevisionNo(int revisionNo) {
		_revisionNo = revisionNo;
	}

	@JSON
	@Override
	public String getMeetingId() {
		if (_meetingId == null) {
			return "";
		}
		else {
			return _meetingId;
		}
	}

	@Override
	public void setMeetingId(String meetingId) {
		_meetingId = meetingId;
	}

	@JSON
	@Override
	public String getIssuer() {
		if (_issuer == null) {
			return "";
		}
		else {
			return _issuer;
		}
	}

	@Override
	public void setIssuer(String issuer) {
		_issuer = issuer;
	}

	@JSON
	@Override
	public String getChangeType() {
		if (_changeType == null) {
			return "";
		}
		else {
			return _changeType;
		}
	}

	@Override
	public void setChangeType(String changeType) {
		_changeType = changeType;
	}

	@JSON
	@Override
	public String getChangeRequestby() {
		if (_changeRequestby == null) {
			return "";
		}
		else {
			return _changeRequestby;
		}
	}

	@Override
	public void setChangeRequestby(String changeRequestby) {
		_changeRequestby = changeRequestby;
	}

	@JSON
	@Override
	public String getRfcId() {
		if (_rfcId == null) {
			return "";
		}
		else {
			return _rfcId;
		}
	}

	@Override
	public void setRfcId(String rfcId) {
		_rfcId = rfcId;
	}

	@JSON
	@Override
	public String getRfcOthers() {
		if (_rfcOthers == null) {
			return "";
		}
		else {
			return _rfcOthers;
		}
	}

	@Override
	public void setRfcOthers(String rfcOthers) {
		_rfcOthers = rfcOthers;
	}

	@JSON
	@Override
	public String getRangeOfDisclosure() {
		if (_rangeOfDisclosure == null) {
			return "";
		}
		else {
			return _rangeOfDisclosure;
		}
	}

	@Override
	public void setRangeOfDisclosure(String rangeOfDisclosure) {
		_rangeOfDisclosure = rangeOfDisclosure;
	}

	@JSON
	@Override
	public String getFloor() {
		if (_floor == null) {
			return "";
		}
		else {
			return _floor;
		}
	}

	@Override
	public void setFloor(String floor) {
		_floor = floor;
	}

	@JSON
	@Override
	public String getItem() {
		if (_item == null) {
			return "";
		}
		else {
			return _item;
		}
	}

	@Override
	public void setItem(String item) {
		_item = item;
	}

	@JSON
	@Override
	public String getOriginaldesginDetail() {
		if (_originaldesginDetail == null) {
			return "";
		}
		else {
			return _originaldesginDetail;
		}
	}

	@Override
	public void setOriginaldesginDetail(String originaldesginDetail) {
		_originaldesginDetail = originaldesginDetail;
	}

	@JSON
	@Override
	public String getChangeDetail() {
		if (_changeDetail == null) {
			return "";
		}
		else {
			return _changeDetail;
		}
	}

	@Override
	public void setChangeDetail(String changeDetail) {
		_changeDetail = changeDetail;
	}

	@JSON
	@Override
	public String getAction() {
		if (_action == null) {
			return "";
		}
		else {
			return _action;
		}
	}

	@Override
	public void setAction(String action) {
		_action = action;
	}

	@JSON
	@Override
	public String getEstdesignCosttype() {
		if (_estdesignCosttype == null) {
			return "";
		}
		else {
			return _estdesignCosttype;
		}
	}

	@Override
	public void setEstdesignCosttype(String estdesignCosttype) {
		_estdesignCosttype = estdesignCosttype;
	}

	@JSON
	@Override
	public long getEstdesignCost() {
		return _estdesignCost;
	}

	@Override
	public void setEstdesignCost(long estdesignCost) {
		_estdesignCost = estdesignCost;
	}

	@JSON
	@Override
	public String getEstconstructionCosttype() {
		if (_estconstructionCosttype == null) {
			return "";
		}
		else {
			return _estconstructionCosttype;
		}
	}

	@Override
	public void setEstconstructionCosttype(String estconstructionCosttype) {
		_estconstructionCosttype = estconstructionCosttype;
	}

	@JSON
	@Override
	public long getEstconstructionCost() {
		return _estconstructionCost;
	}

	@Override
	public void setEstconstructionCost(long estconstructionCost) {
		_estconstructionCost = estconstructionCost;
	}

	@JSON
	@Override
	public String getExpenseAjustmentDivision() {
		if (_expenseAjustmentDivision == null) {
			return "";
		}
		else {
			return _expenseAjustmentDivision;
		}
	}

	@Override
	public void setExpenseAjustmentDivision(String expenseAjustmentDivision) {
		_expenseAjustmentDivision = expenseAjustmentDivision;
	}

	@JSON
	@Override
	public long getAttachmentId1() {
		return _attachmentId1;
	}

	@Override
	public void setAttachmentId1(long attachmentId1) {
		_attachmentId1 = attachmentId1;
	}

	@JSON
	@Override
	public long getAttachmentId2() {
		return _attachmentId2;
	}

	@Override
	public void setAttachmentId2(long attachmentId2) {
		_attachmentId2 = attachmentId2;
	}

	@JSON
	@Override
	public long getAttachmentId3() {
		return _attachmentId3;
	}

	@Override
	public void setAttachmentId3(long attachmentId3) {
		_attachmentId3 = attachmentId3;
	}

	@JSON
	@Override
	public long getAttachmentId4() {
		return _attachmentId4;
	}

	@Override
	public void setAttachmentId4(long attachmentId4) {
		_attachmentId4 = attachmentId4;
	}

	@JSON
	@Override
	public String getAttachment1() {
		if (_attachment1 == null) {
			return "";
		}
		else {
			return _attachment1;
		}
	}

	@Override
	public void setAttachment1(String attachment1) {
		_attachment1 = attachment1;
	}

	@JSON
	@Override
	public String getAttachment2() {
		if (_attachment2 == null) {
			return "";
		}
		else {
			return _attachment2;
		}
	}

	@Override
	public void setAttachment2(String attachment2) {
		_attachment2 = attachment2;
	}

	@JSON
	@Override
	public String getAttachment3() {
		if (_attachment3 == null) {
			return "";
		}
		else {
			return _attachment3;
		}
	}

	@Override
	public void setAttachment3(String attachment3) {
		_attachment3 = attachment3;
	}

	@JSON
	@Override
	public String getAttachment4() {
		if (_attachment4 == null) {
			return "";
		}
		else {
			return _attachment4;
		}
	}

	@Override
	public void setAttachment4(String attachment4) {
		_attachment4 = attachment4;
	}

	@JSON
	@Override
	public String getResponsePeriod() {
		if (_responsePeriod == null) {
			return "";
		}
		else {
			return _responsePeriod;
		}
	}

	@Override
	public void setResponsePeriod(String responsePeriod) {
		_responsePeriod = responsePeriod;
	}

	@JSON
	@Override
	public String getPersonInCharge() {
		if (_personInCharge == null) {
			return "";
		}
		else {
			return _personInCharge;
		}
	}

	@Override
	public void setPersonInCharge(String personInCharge) {
		_personInCharge = personInCharge;
	}

	@JSON
	@Override
	public long getApprovalNo() {
		return _approvalNo;
	}

	@Override
	public void setApprovalNo(long approvalNo) {
		_approvalNo = approvalNo;
	}

	@JSON
	@Override
	public String getApprovalStatus() {
		if (_approvalStatus == null) {
			return "";
		}
		else {
			return _approvalStatus;
		}
	}

	@Override
	public void setApprovalStatus(String approvalStatus) {
		_approvalStatus = approvalStatus;
	}

	@JSON
	@Override
	public Date getApprovalDate() {
		return _approvalDate;
	}

	@Override
	public void setApprovalDate(Date approvalDate) {
		_approvalDate = approvalDate;
	}

	@JSON
	@Override
	public String getClientApprovalStatus() {
		if (_clientApprovalStatus == null) {
			return "";
		}
		else {
			return _clientApprovalStatus;
		}
	}

	@Override
	public void setClientApprovalStatus(String clientApprovalStatus) {
		_clientApprovalStatus = clientApprovalStatus;
	}

	@JSON
	@Override
	public Date getClientApprovalDate() {
		return _clientApprovalDate;
	}

	@Override
	public void setClientApprovalDate(Date clientApprovalDate) {
		_clientApprovalDate = clientApprovalDate;
	}

	@JSON
	@Override
	public String getConstructionStatus() {
		if (_constructionStatus == null) {
			return "";
		}
		else {
			return _constructionStatus;
		}
	}

	@Override
	public void setConstructionStatus(String constructionStatus) {
		_constructionStatus = constructionStatus;
	}

	@JSON
	@Override
	public Date getConstructionDate() {
		return _constructionDate;
	}

	@Override
	public void setConstructionDate(Date constructionDate) {
		_constructionDate = constructionDate;
	}

	@JSON
	@Override
	public String getCreatedBy() {
		if (_createdBy == null) {
			return "";
		}
		else {
			return _createdBy;
		}
	}

	@Override
	public void setCreatedBy(String createdBy) {
		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreatedOn() {
		return _createdOn;
	}

	@Override
	public void setCreatedOn(Date createdOn) {
		_createdOn = createdOn;
	}

	@JSON
	@Override
	public String getModifiedBy() {
		if (_modifiedBy == null) {
			return "";
		}
		else {
			return _modifiedBy;
		}
	}

	@Override
	public void setModifiedBy(String modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedOn() {
		return _modifiedOn;
	}

	@Override
	public void setModifiedOn(Date modifiedOn) {
		_modifiedOn = modifiedOn;
	}

	@JSON
	@Override
	public boolean getIsActive() {
		return _isActive;
	}

	@JSON
	@Override
	public boolean isIsActive() {
		return _isActive;
	}

	@Override
	public void setIsActive(boolean isActive) {
		_isActive = isActive;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, DesignChangeDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DesignChangeDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DesignChangeDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DesignChangeDetailsImpl designChangeDetailsImpl =
			new DesignChangeDetailsImpl();

		designChangeDetailsImpl.setDcrChangeSeqno(getDcrChangeSeqno());
		designChangeDetailsImpl.setDesignchangeSubseqno(
			getDesignchangeSubseqno());
		designChangeDetailsImpl.setGroupId(getGroupId());
		designChangeDetailsImpl.setRevisionNo(getRevisionNo());
		designChangeDetailsImpl.setMeetingId(getMeetingId());
		designChangeDetailsImpl.setIssuer(getIssuer());
		designChangeDetailsImpl.setChangeType(getChangeType());
		designChangeDetailsImpl.setChangeRequestby(getChangeRequestby());
		designChangeDetailsImpl.setRfcId(getRfcId());
		designChangeDetailsImpl.setRfcOthers(getRfcOthers());
		designChangeDetailsImpl.setRangeOfDisclosure(getRangeOfDisclosure());
		designChangeDetailsImpl.setFloor(getFloor());
		designChangeDetailsImpl.setItem(getItem());
		designChangeDetailsImpl.setOriginaldesginDetail(
			getOriginaldesginDetail());
		designChangeDetailsImpl.setChangeDetail(getChangeDetail());
		designChangeDetailsImpl.setAction(getAction());
		designChangeDetailsImpl.setEstdesignCosttype(getEstdesignCosttype());
		designChangeDetailsImpl.setEstdesignCost(getEstdesignCost());
		designChangeDetailsImpl.setEstconstructionCosttype(
			getEstconstructionCosttype());
		designChangeDetailsImpl.setEstconstructionCost(
			getEstconstructionCost());
		designChangeDetailsImpl.setExpenseAjustmentDivision(
			getExpenseAjustmentDivision());
		designChangeDetailsImpl.setAttachmentId1(getAttachmentId1());
		designChangeDetailsImpl.setAttachmentId2(getAttachmentId2());
		designChangeDetailsImpl.setAttachmentId3(getAttachmentId3());
		designChangeDetailsImpl.setAttachmentId4(getAttachmentId4());
		designChangeDetailsImpl.setAttachment1(getAttachment1());
		designChangeDetailsImpl.setAttachment2(getAttachment2());
		designChangeDetailsImpl.setAttachment3(getAttachment3());
		designChangeDetailsImpl.setAttachment4(getAttachment4());
		designChangeDetailsImpl.setResponsePeriod(getResponsePeriod());
		designChangeDetailsImpl.setPersonInCharge(getPersonInCharge());
		designChangeDetailsImpl.setApprovalNo(getApprovalNo());
		designChangeDetailsImpl.setApprovalStatus(getApprovalStatus());
		designChangeDetailsImpl.setApprovalDate(getApprovalDate());
		designChangeDetailsImpl.setClientApprovalStatus(
			getClientApprovalStatus());
		designChangeDetailsImpl.setClientApprovalDate(getClientApprovalDate());
		designChangeDetailsImpl.setConstructionStatus(getConstructionStatus());
		designChangeDetailsImpl.setConstructionDate(getConstructionDate());
		designChangeDetailsImpl.setCreatedBy(getCreatedBy());
		designChangeDetailsImpl.setCreatedOn(getCreatedOn());
		designChangeDetailsImpl.setModifiedBy(getModifiedBy());
		designChangeDetailsImpl.setModifiedOn(getModifiedOn());
		designChangeDetailsImpl.setIsActive(isIsActive());

		designChangeDetailsImpl.resetOriginalValues();

		return designChangeDetailsImpl;
	}

	@Override
	public int compareTo(DesignChangeDetails designChangeDetails) {
		long primaryKey = designChangeDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DesignChangeDetails)) {
			return false;
		}

		DesignChangeDetails designChangeDetails = (DesignChangeDetails)obj;

		long primaryKey = designChangeDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DesignChangeDetails> toCacheModel() {
		DesignChangeDetailsCacheModel designChangeDetailsCacheModel =
			new DesignChangeDetailsCacheModel();

		designChangeDetailsCacheModel.dcrChangeSeqno = getDcrChangeSeqno();

		designChangeDetailsCacheModel.designchangeSubseqno =
			getDesignchangeSubseqno();

		designChangeDetailsCacheModel.groupId = getGroupId();

		designChangeDetailsCacheModel.revisionNo = getRevisionNo();

		designChangeDetailsCacheModel.meetingId = getMeetingId();

		String meetingId = designChangeDetailsCacheModel.meetingId;

		if ((meetingId != null) && (meetingId.length() == 0)) {
			designChangeDetailsCacheModel.meetingId = null;
		}

		designChangeDetailsCacheModel.issuer = getIssuer();

		String issuer = designChangeDetailsCacheModel.issuer;

		if ((issuer != null) && (issuer.length() == 0)) {
			designChangeDetailsCacheModel.issuer = null;
		}

		designChangeDetailsCacheModel.changeType = getChangeType();

		String changeType = designChangeDetailsCacheModel.changeType;

		if ((changeType != null) && (changeType.length() == 0)) {
			designChangeDetailsCacheModel.changeType = null;
		}

		designChangeDetailsCacheModel.changeRequestby = getChangeRequestby();

		String changeRequestby = designChangeDetailsCacheModel.changeRequestby;

		if ((changeRequestby != null) && (changeRequestby.length() == 0)) {
			designChangeDetailsCacheModel.changeRequestby = null;
		}

		designChangeDetailsCacheModel.rfcId = getRfcId();

		String rfcId = designChangeDetailsCacheModel.rfcId;

		if ((rfcId != null) && (rfcId.length() == 0)) {
			designChangeDetailsCacheModel.rfcId = null;
		}

		designChangeDetailsCacheModel.rfcOthers = getRfcOthers();

		String rfcOthers = designChangeDetailsCacheModel.rfcOthers;

		if ((rfcOthers != null) && (rfcOthers.length() == 0)) {
			designChangeDetailsCacheModel.rfcOthers = null;
		}

		designChangeDetailsCacheModel.rangeOfDisclosure =
			getRangeOfDisclosure();

		String rangeOfDisclosure =
			designChangeDetailsCacheModel.rangeOfDisclosure;

		if ((rangeOfDisclosure != null) && (rangeOfDisclosure.length() == 0)) {
			designChangeDetailsCacheModel.rangeOfDisclosure = null;
		}

		designChangeDetailsCacheModel.floor = getFloor();

		String floor = designChangeDetailsCacheModel.floor;

		if ((floor != null) && (floor.length() == 0)) {
			designChangeDetailsCacheModel.floor = null;
		}

		designChangeDetailsCacheModel.item = getItem();

		String item = designChangeDetailsCacheModel.item;

		if ((item != null) && (item.length() == 0)) {
			designChangeDetailsCacheModel.item = null;
		}

		designChangeDetailsCacheModel.originaldesginDetail =
			getOriginaldesginDetail();

		String originaldesginDetail =
			designChangeDetailsCacheModel.originaldesginDetail;

		if ((originaldesginDetail != null) &&
			(originaldesginDetail.length() == 0)) {

			designChangeDetailsCacheModel.originaldesginDetail = null;
		}

		designChangeDetailsCacheModel.changeDetail = getChangeDetail();

		String changeDetail = designChangeDetailsCacheModel.changeDetail;

		if ((changeDetail != null) && (changeDetail.length() == 0)) {
			designChangeDetailsCacheModel.changeDetail = null;
		}

		designChangeDetailsCacheModel.action = getAction();

		String action = designChangeDetailsCacheModel.action;

		if ((action != null) && (action.length() == 0)) {
			designChangeDetailsCacheModel.action = null;
		}

		designChangeDetailsCacheModel.estdesignCosttype =
			getEstdesignCosttype();

		String estdesignCosttype =
			designChangeDetailsCacheModel.estdesignCosttype;

		if ((estdesignCosttype != null) && (estdesignCosttype.length() == 0)) {
			designChangeDetailsCacheModel.estdesignCosttype = null;
		}

		designChangeDetailsCacheModel.estdesignCost = getEstdesignCost();

		designChangeDetailsCacheModel.estconstructionCosttype =
			getEstconstructionCosttype();

		String estconstructionCosttype =
			designChangeDetailsCacheModel.estconstructionCosttype;

		if ((estconstructionCosttype != null) &&
			(estconstructionCosttype.length() == 0)) {

			designChangeDetailsCacheModel.estconstructionCosttype = null;
		}

		designChangeDetailsCacheModel.estconstructionCost =
			getEstconstructionCost();

		designChangeDetailsCacheModel.expenseAjustmentDivision =
			getExpenseAjustmentDivision();

		String expenseAjustmentDivision =
			designChangeDetailsCacheModel.expenseAjustmentDivision;

		if ((expenseAjustmentDivision != null) &&
			(expenseAjustmentDivision.length() == 0)) {

			designChangeDetailsCacheModel.expenseAjustmentDivision = null;
		}

		designChangeDetailsCacheModel.attachmentId1 = getAttachmentId1();

		designChangeDetailsCacheModel.attachmentId2 = getAttachmentId2();

		designChangeDetailsCacheModel.attachmentId3 = getAttachmentId3();

		designChangeDetailsCacheModel.attachmentId4 = getAttachmentId4();

		designChangeDetailsCacheModel.attachment1 = getAttachment1();

		String attachment1 = designChangeDetailsCacheModel.attachment1;

		if ((attachment1 != null) && (attachment1.length() == 0)) {
			designChangeDetailsCacheModel.attachment1 = null;
		}

		designChangeDetailsCacheModel.attachment2 = getAttachment2();

		String attachment2 = designChangeDetailsCacheModel.attachment2;

		if ((attachment2 != null) && (attachment2.length() == 0)) {
			designChangeDetailsCacheModel.attachment2 = null;
		}

		designChangeDetailsCacheModel.attachment3 = getAttachment3();

		String attachment3 = designChangeDetailsCacheModel.attachment3;

		if ((attachment3 != null) && (attachment3.length() == 0)) {
			designChangeDetailsCacheModel.attachment3 = null;
		}

		designChangeDetailsCacheModel.attachment4 = getAttachment4();

		String attachment4 = designChangeDetailsCacheModel.attachment4;

		if ((attachment4 != null) && (attachment4.length() == 0)) {
			designChangeDetailsCacheModel.attachment4 = null;
		}

		designChangeDetailsCacheModel.responsePeriod = getResponsePeriod();

		String responsePeriod = designChangeDetailsCacheModel.responsePeriod;

		if ((responsePeriod != null) && (responsePeriod.length() == 0)) {
			designChangeDetailsCacheModel.responsePeriod = null;
		}

		designChangeDetailsCacheModel.personInCharge = getPersonInCharge();

		String personInCharge = designChangeDetailsCacheModel.personInCharge;

		if ((personInCharge != null) && (personInCharge.length() == 0)) {
			designChangeDetailsCacheModel.personInCharge = null;
		}

		designChangeDetailsCacheModel.approvalNo = getApprovalNo();

		designChangeDetailsCacheModel.approvalStatus = getApprovalStatus();

		String approvalStatus = designChangeDetailsCacheModel.approvalStatus;

		if ((approvalStatus != null) && (approvalStatus.length() == 0)) {
			designChangeDetailsCacheModel.approvalStatus = null;
		}

		Date approvalDate = getApprovalDate();

		if (approvalDate != null) {
			designChangeDetailsCacheModel.approvalDate = approvalDate.getTime();
		}
		else {
			designChangeDetailsCacheModel.approvalDate = Long.MIN_VALUE;
		}

		designChangeDetailsCacheModel.clientApprovalStatus =
			getClientApprovalStatus();

		String clientApprovalStatus =
			designChangeDetailsCacheModel.clientApprovalStatus;

		if ((clientApprovalStatus != null) &&
			(clientApprovalStatus.length() == 0)) {

			designChangeDetailsCacheModel.clientApprovalStatus = null;
		}

		Date clientApprovalDate = getClientApprovalDate();

		if (clientApprovalDate != null) {
			designChangeDetailsCacheModel.clientApprovalDate =
				clientApprovalDate.getTime();
		}
		else {
			designChangeDetailsCacheModel.clientApprovalDate = Long.MIN_VALUE;
		}

		designChangeDetailsCacheModel.constructionStatus =
			getConstructionStatus();

		String constructionStatus =
			designChangeDetailsCacheModel.constructionStatus;

		if ((constructionStatus != null) &&
			(constructionStatus.length() == 0)) {

			designChangeDetailsCacheModel.constructionStatus = null;
		}

		Date constructionDate = getConstructionDate();

		if (constructionDate != null) {
			designChangeDetailsCacheModel.constructionDate =
				constructionDate.getTime();
		}
		else {
			designChangeDetailsCacheModel.constructionDate = Long.MIN_VALUE;
		}

		designChangeDetailsCacheModel.createdBy = getCreatedBy();

		String createdBy = designChangeDetailsCacheModel.createdBy;

		if ((createdBy != null) && (createdBy.length() == 0)) {
			designChangeDetailsCacheModel.createdBy = null;
		}

		Date createdOn = getCreatedOn();

		if (createdOn != null) {
			designChangeDetailsCacheModel.createdOn = createdOn.getTime();
		}
		else {
			designChangeDetailsCacheModel.createdOn = Long.MIN_VALUE;
		}

		designChangeDetailsCacheModel.modifiedBy = getModifiedBy();

		String modifiedBy = designChangeDetailsCacheModel.modifiedBy;

		if ((modifiedBy != null) && (modifiedBy.length() == 0)) {
			designChangeDetailsCacheModel.modifiedBy = null;
		}

		Date modifiedOn = getModifiedOn();

		if (modifiedOn != null) {
			designChangeDetailsCacheModel.modifiedOn = modifiedOn.getTime();
		}
		else {
			designChangeDetailsCacheModel.modifiedOn = Long.MIN_VALUE;
		}

		designChangeDetailsCacheModel.isActive = isIsActive();

		return designChangeDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DesignChangeDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DesignChangeDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DesignChangeDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DesignChangeDetails)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DesignChangeDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DesignChangeDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DesignChangeDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DesignChangeDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DesignChangeDetails>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _dcrChangeSeqno;
	private long _designchangeSubseqno;
	private long _groupId;
	private int _revisionNo;
	private String _meetingId;
	private String _issuer;
	private String _changeType;
	private String _changeRequestby;
	private String _rfcId;
	private String _rfcOthers;
	private String _rangeOfDisclosure;
	private String _floor;
	private String _item;
	private String _originaldesginDetail;
	private String _changeDetail;
	private String _action;
	private String _estdesignCosttype;
	private long _estdesignCost;
	private String _estconstructionCosttype;
	private long _estconstructionCost;
	private String _expenseAjustmentDivision;
	private long _attachmentId1;
	private long _attachmentId2;
	private long _attachmentId3;
	private long _attachmentId4;
	private String _attachment1;
	private String _attachment2;
	private String _attachment3;
	private String _attachment4;
	private String _responsePeriod;
	private String _personInCharge;
	private long _approvalNo;
	private String _approvalStatus;
	private Date _approvalDate;
	private String _clientApprovalStatus;
	private Date _clientApprovalDate;
	private String _constructionStatus;
	private Date _constructionDate;
	private String _createdBy;
	private Date _createdOn;
	private String _modifiedBy;
	private Date _modifiedOn;
	private boolean _isActive;
	private DesignChangeDetails _escapedModel;

}